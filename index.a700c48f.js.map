{"mappings":"iiBAAA,IAiCIA,EACAC,EAlCJC,EAAAC,EAAA,S,8EAaEC,EAOEC,EAAAC,eAPFC,KACAC,EAMEH,EAAAC,eANFG,WACAC,EAKEL,EAAAC,eALFK,cAGAC,GAEEP,EAAAC,eAJFO,WAIER,EAAAC,eAHFQ,WAGET,EAAAC,eAFFS,YACAC,EACEX,EAAAC,eADFW,SAIAC,EAMEb,EAAAc,cANFC,SACAC,EAKEhB,EAAAc,cALFG,WACAC,EAIElB,EAAAc,cAJFK,iBACAC,EAGEpB,EAAAc,cAHFO,iBACAC,EAEEtB,EAAAc,cAFFS,eACAC,EACExB,EAAAc,cADFW,OAIEC,EAAO,EAKXF,EAAOG,MAAMC,QAAU,OACvBZ,EAAWW,MAAMC,QAAU,QAG3B,EAAAC,EAAAC,eAEA,I,EAAMC,G,EAAsBC,EAAAnC,EAAA,CAAAmC,EAAAC,GAAAC,MAAA,SAAAC,I,IAEpBC,E,kEAAAA,EAAe,IAAIC,gBAAgB,CACvCC,KAAAZ,IAEFa,EAJoB,iBAIWH,G,uFAG3BG,EAAiB,W,MAAGP,EAAAnC,EAAA,CAAAmC,EAAAC,GAAAC,MAAA,SAAAC,EAAOK,EAAaJ,G,IAKpCK,EAGAC,E,yEANRlB,EAAOG,MAAMC,QAAU,QACvBzB,EAAWwC,UAAY,G,mBAEI,EAAAC,EAAAC,aAAYL,EAAaJ,G,OAA5CK,EAAUK,EAAAC,KAChBvB,EAAOG,MAAMC,QAAU,OACvBjC,EAAa8C,EAAWO,aAClBN,EAASD,EAAWQ,SACfC,OAAS,IAClB,EAAAC,EAAAC,oBAAmBV,EAAQvC,GAC3Ba,EAAWW,MAAMC,QAAU,QAE3ByB,SAASC,OAAOC,QAAQ,oC,kDAG1BC,QAAQC,IAAIX,EAAAY,GAAMC,S,0EAhBWnB,EAAaJ,G,gCAAvB,GAqBjBwB,EAAY,W,MAAG5B,EAAAnC,EAAA,CAAAmC,EAAAC,GAAAC,MAAA,SAAAC,EAAM0B,G,IAMnBC,EAIA1B,E,kEATNyB,EAAEE,iBACFrC,EAAO,EACPJ,EAAe0C,YAAc,EAC7B7D,EAAWwC,UAAY,GAEjBmB,EAAOD,EAAEI,OACfrE,EAAQkE,EAAKI,SAASC,WAAWC,MACb,gBAEdhC,EAAe,IAAIC,gBAAgB,CACvCgC,MAAAzE,EACA0C,KAAAZ,IAGFa,EAPoB,gBAOWH,GAE/B0B,EAAKQ,Q,4DAjBoBT,G,gCAAT,GAmFlBhD,EAAS0D,iBAAiB,SAAUX,GACpC1C,EAAiBqD,iBAAiB,SAhEZ,WACpB,GAAI7C,EAAO/B,EAAY,CACrB+B,GAAQ,EACRJ,EAAe0C,YAActC,EAC7B,IAAMU,EAAe,IAAIC,gBAAgB,CACvCC,KAAAZ,IAGE9B,GACFwC,EAAaoC,IAAI,QAAS5E,GAI5B2C,EADqB3C,EAAQ,gBAAkB,iBACfwC,E,KAoDpChB,EAAiBmD,iBAAiB,SAhDZ,WACpB,GAAI7C,EAAO,EAAG,CACZA,GAAQ,EACRJ,EAAe0C,YAActC,EAC7B,IAAMU,EAAe,IAAIC,gBAAgB,CACvCC,KAAAZ,IAGE9B,GACFwC,EAAaoC,IAAI,QAAS5E,GAI5B2C,EADqB3C,EAAQ,gBAAkB,iBACfwC,E,KAoCpCjC,EAAWoE,iBAAiB,QAAS1C,EAAA4C,kBACrCpE,EAAckE,iBAAiB,QAAS1C,EAAA6C,kBACxC3E,EAAKwE,iBAAiB,UAAW1C,EAAA8C,qBACjCpE,EAAWgE,iBAAiB,QAASK,EAAAC,kBACrClE,EAAS4D,iBAAiB,QAASK,EAAAE,gBAGnC/C,G","sources":["src/js/index.js"],"sourcesContent":["import { createMoviesMarkup } from './renderMarkup';\nimport { fetchMovies } from './tmdb-api';\nimport { commonElements, indexElements } from './domElements';\nimport {\n  handleCloseModal,\n  handleKeyCloseModal,\n  handleSelectCard,\n  toogleModal,\n} from './modal';\nimport { handleAddQueue, handleAddWatched } from './handleMovieList';\n\n// DOM\nconst {\n  body,\n  movieCards,\n  backdropModal,\n  closeModal,\n  modalMovie,\n  addWatched,\n  addQueue,\n} = commonElements;\n\nconst {\n  heroForm,\n  pagination,\n  paginationAddBtn,\n  paginationSubBtn,\n  paginationSpan,\n  loader,\n} = indexElements;\n\n// Variables\nlet page = 1;\nlet totalPages;\nlet query;\n\n// inicializacion de elementos DOM\nloader.style.display = 'none';\npagination.style.display = 'none';\n\n// Funciones\ntoogleModal();\n\nconst renderInitialMovies = async () => {\n  const searchRoute = 'movie/popular?';\n  const searchParams = new URLSearchParams({\n    page,\n  });\n  renderFetchMovies(searchRoute, searchParams);\n};\n\nconst renderFetchMovies = async (searchRoute, searchParams) => {\n  // COMPROBAR CON PAGE PORQUE EL SERVIDOR LOCAL NO ME DEJA\n  loader.style.display = 'block';\n  movieCards.innerHTML = '';\n  try {\n    const moviesData = await fetchMovies(searchRoute, searchParams);\n    loader.style.display = 'none';\n    totalPages = moviesData.total_pages;\n    const movies = moviesData.results;\n    if (movies.length > 0) {\n      createMoviesMarkup(movies, movieCards);\n      pagination.style.display = 'flex';\n    } else {\n      Notiflix.Notify.failure('Sorry, no result for your search');\n    }\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\n// Manejadores de eventos\nconst handleSubmit = async e => {\n  e.preventDefault();\n  page = 1;\n  paginationSpan.textContent = 1;\n  movieCards.innerHTML = '';\n\n  const form = e.target;\n  query = form.elements.movieInput.value;\n  const searchRoute = 'search/movie?';\n\n  const searchParams = new URLSearchParams({\n    query,\n    page,\n  });\n\n  renderFetchMovies(searchRoute, searchParams);\n\n  form.reset();\n};\n// Paginacion\nconst handleAddPage = () => {\n  if (page < totalPages) {\n    page += 1;\n    paginationSpan.textContent = page;\n    const searchParams = new URLSearchParams({\n      page,\n    });\n\n    if (query) {\n      searchParams.set('query', query);\n    }\n\n    const currentRoute = query ? 'search/movie?' : 'movie/popular?';\n    renderFetchMovies(currentRoute, searchParams);\n  }\n};\n\nconst handleSubPage = () => {\n  if (page > 1) {\n    page -= 1;\n    paginationSpan.textContent = page;\n    const searchParams = new URLSearchParams({\n      page,\n    });\n\n    if (query) {\n      searchParams.set('query', query);\n    }\n\n    const currentRoute = query ? 'search/movie?' : 'movie/popular?';\n    renderFetchMovies(currentRoute, searchParams);\n  }\n};\n\n// const handleAddWatched = () => {\n//   const movie = getSelectedMovie();\n//   if (movie) {\n//     const movieIsExist = watchedArray.some(el => el.id === movie.id);\n//     if (!movieIsExist) {\n//       watchedArray.push(movie);\n//       localStorage.setItem('watchedArray', JSON.stringify(watchedArray));\n//     } else {\n//       Notiflix.Notify.warning('This movie is already in list');\n//     }\n//   }\n// };\n\n// const handleAddQueue = () => {\n//   const movie = getSelectedMovie();\n//   if (movie) {\n//     const movieIsExist = queueArray.some(el => el.id === movie.id);\n//     if (!movieIsExist) {\n//       queueArray.push(movie);\n//       localStorage.setItem('queueArray', JSON.stringify(queueArray));\n//     } else {\n//       Notiflix.Notify.warning('This movie is already in list');\n//     }\n//   }\n// };\n\n//\n\n// Eventos\nheroForm.addEventListener('submit', handleSubmit);\npaginationAddBtn.addEventListener('click', handleAddPage);\npaginationSubBtn.addEventListener('click', handleSubPage);\nmovieCards.addEventListener('click', handleSelectCard);\nbackdropModal.addEventListener('click', handleCloseModal);\nbody.addEventListener('keydown', handleKeyCloseModal);\naddWatched.addEventListener('click', handleAddWatched);\naddQueue.addEventListener('click', handleAddQueue);\n\n// Inicializacion\nrenderInitialMovies();\n"],"names":["$44ae6d9db4eaca0f$var$totalPages","$44ae6d9db4eaca0f$var$query","$bpxeT","parcelRequire","$44ae6d9db4eaca0f$var$body","$2fHuZ","commonElements","body","$44ae6d9db4eaca0f$var$movieCards","movieCards","$44ae6d9db4eaca0f$var$backdropModal","backdropModal","$44ae6d9db4eaca0f$var$addWatched","closeModal","modalMovie","addWatched","$44ae6d9db4eaca0f$var$addQueue","addQueue","$44ae6d9db4eaca0f$var$heroForm","indexElements","heroForm","$44ae6d9db4eaca0f$var$pagination","pagination","$44ae6d9db4eaca0f$var$paginationAddBtn","paginationAddBtn","$44ae6d9db4eaca0f$var$paginationSubBtn","paginationSubBtn","$44ae6d9db4eaca0f$var$paginationSpan","paginationSpan","$44ae6d9db4eaca0f$var$loader","loader","$44ae6d9db4eaca0f$var$page","style","display","$5xtVg","toogleModal","$44ae6d9db4eaca0f$var$renderInitialMovies","$parcel$interopDefault","$2TvXO","mark","_callee","searchParams","URLSearchParams","page","$44ae6d9db4eaca0f$var$renderFetchMovies","searchRoute","moviesData","movies","innerHTML","$kK94C","fetchMovies","_ctx","sent","total_pages","results","length","$5118m","createMoviesMarkup","Notiflix","Notify","failure","console","log","t0","message","$44ae6d9db4eaca0f$var$handleSubmit","e","form","preventDefault","textContent","target","elements","movieInput","value","query","reset","addEventListener","set","handleSelectCard","handleCloseModal","handleKeyCloseModal","$2GBsa","handleAddWatched","handleAddQueue"],"version":3,"file":"index.a700c48f.js.map"}